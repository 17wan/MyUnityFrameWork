//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ApplicationManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ApplicationManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Awake", Awake);
		L.RegFunction("AppLaunch", AppLaunch);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_AppMode", get_m_AppMode, set_m_AppMode);
		L.RegVar("m_quickLunch", get_m_quickLunch, set_m_quickLunch);
		L.RegVar("m_useLua", get_m_useLua, set_m_useLua);
		L.RegVar("m_Status", get_m_Status, set_m_Status);
		L.RegVar("m_globalLogic", get_m_globalLogic, set_m_globalLogic);
		L.RegVar("s_OnApplicationQuit", get_s_OnApplicationQuit, set_s_OnApplicationQuit);
		L.RegVar("s_OnApplicationPause", get_s_OnApplicationPause, set_s_OnApplicationPause);
		L.RegVar("s_OnApplicationFocus", get_s_OnApplicationFocus, set_s_OnApplicationFocus);
		L.RegVar("s_OnApplicationUpdate", get_s_OnApplicationUpdate, set_s_OnApplicationUpdate);
		L.RegVar("s_OnApplicationOnGUI", get_s_OnApplicationOnGUI, set_s_OnApplicationOnGUI);
		L.RegVar("Instance", get_Instance, set_Instance);
		L.RegVar("AppMode", get_AppMode, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Awake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ApplicationManager obj = (ApplicationManager)ToLua.CheckObject(L, 1, typeof(ApplicationManager));
			obj.Awake();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AppLaunch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ApplicationManager obj = (ApplicationManager)ToLua.CheckObject(L, 1, typeof(ApplicationManager));
			obj.AppLaunch();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_AppMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			AppMode ret = obj.m_AppMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_AppMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_quickLunch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			bool ret = obj.m_quickLunch;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_quickLunch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_useLua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			bool ret = obj.m_useLua;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_useLua on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			string ret = obj.m_Status;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_Status on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_globalLogic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			System.Collections.Generic.List<string> ret = obj.m_globalLogic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_globalLogic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_OnApplicationQuit(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ApplicationManager.s_OnApplicationQuit);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_OnApplicationPause(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ApplicationManager.s_OnApplicationPause);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_OnApplicationFocus(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ApplicationManager.s_OnApplicationFocus);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_OnApplicationUpdate(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ApplicationManager.s_OnApplicationUpdate);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_OnApplicationOnGUI(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ApplicationManager.s_OnApplicationOnGUI);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ApplicationManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppMode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ApplicationManager.AppMode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_AppMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			AppMode arg0 = (AppMode)ToLua.CheckObject(L, 2, typeof(AppMode));
			obj.m_AppMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_AppMode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_quickLunch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_quickLunch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_quickLunch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_useLua(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_useLua = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_useLua on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.m_Status = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_Status on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_globalLogic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ApplicationManager obj = (ApplicationManager)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.m_globalLogic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_globalLogic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_OnApplicationQuit(IntPtr L)
	{
		try
		{
			ApplicationVoidCallback arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ApplicationVoidCallback)ToLua.CheckObject(L, 2, typeof(ApplicationVoidCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ApplicationVoidCallback), func) as ApplicationVoidCallback;
			}

			ApplicationManager.s_OnApplicationQuit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_OnApplicationPause(IntPtr L)
	{
		try
		{
			ApplicationBoolCallback arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ApplicationBoolCallback)ToLua.CheckObject(L, 2, typeof(ApplicationBoolCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ApplicationBoolCallback), func) as ApplicationBoolCallback;
			}

			ApplicationManager.s_OnApplicationPause = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_OnApplicationFocus(IntPtr L)
	{
		try
		{
			ApplicationBoolCallback arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ApplicationBoolCallback)ToLua.CheckObject(L, 2, typeof(ApplicationBoolCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ApplicationBoolCallback), func) as ApplicationBoolCallback;
			}

			ApplicationManager.s_OnApplicationFocus = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_OnApplicationUpdate(IntPtr L)
	{
		try
		{
			ApplicationVoidCallback arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ApplicationVoidCallback)ToLua.CheckObject(L, 2, typeof(ApplicationVoidCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ApplicationVoidCallback), func) as ApplicationVoidCallback;
			}

			ApplicationManager.s_OnApplicationUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_OnApplicationOnGUI(IntPtr L)
	{
		try
		{
			ApplicationVoidCallback arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ApplicationVoidCallback)ToLua.CheckObject(L, 2, typeof(ApplicationVoidCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ApplicationVoidCallback), func) as ApplicationVoidCallback;
			}

			ApplicationManager.s_OnApplicationOnGUI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instance(IntPtr L)
	{
		try
		{
			ApplicationManager arg0 = (ApplicationManager)ToLua.CheckUnityObject(L, 2, typeof(ApplicationManager));
			ApplicationManager.Instance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

