//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ConfigManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("ConfigManager");
		L.RegFunction("GetIsExistConfig", GetIsExistConfig);
		L.RegFunction("GetData", GetData);
		L.RegFunction("CleanCatch", CleanCatch);
		L.RegFunction("SaveData", SaveData);
		L.RegFunction("GetEditorConfigData", GetEditorConfigData);
		L.RegFunction("SaveEditorConfigData", SaveEditorConfigData);
		L.RegVar("c_directoryName", get_c_directoryName, null);
		L.RegVar("c_expandName", get_c_expandName, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIsExistConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = ConfigManager.GetIsExistConfig(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.Dictionary<string,SingleField> o = ConfigManager.GetData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanCatch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ConfigManager.CleanCatch();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.Dictionary<string,SingleField> arg1 = (System.Collections.Generic.Dictionary<string,SingleField>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,SingleField>));
			ConfigManager.SaveData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorConfigData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.Dictionary<string,object> o = ConfigManager.GetEditorConfigData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveEditorConfigData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Collections.Generic.Dictionary<string,object> arg1 = (System.Collections.Generic.Dictionary<string,object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,object>));
			ConfigManager.SaveEditorConfigData(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_c_directoryName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ConfigManager.c_directoryName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_c_expandName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ConfigManager.c_expandName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

