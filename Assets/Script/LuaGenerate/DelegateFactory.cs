//this source code was auto-generated by tolua#, do not modify it
using System;
using System.Collections.Generic;
using LuaInterface;

public static class DelegateFactory
{
	public delegate Delegate DelegateValue(LuaFunction func, LuaTable self, bool flag);
	public static Dictionary<Type, DelegateValue> dict = new Dictionary<Type, DelegateValue>();

	static DelegateFactory()
	{
		Register();
	}

	[NoToLuaAttribute]
	public static void Register()
	{
		dict.Clear();
		dict.Add(typeof(UnityEngine.Events.UnityAction), UnityEngine_Events_UnityAction);
		dict.Add(typeof(AnimCallBack), AnimCallBack);
		dict.Add(typeof(AnimCustomMethodVector3), AnimCustomMethodVector3);
		dict.Add(typeof(AnimCustomMethodVector2), AnimCustomMethodVector2);
		dict.Add(typeof(AnimCustomMethodFloat), AnimCustomMethodFloat);
		dict.Add(typeof(InputEventHandle<InputUIOnClickEvent>), InputEventHandle_InputUIOnClickEvent);
		dict.Add(typeof(EventHandle), EventHandle);
		dict.Add(typeof(UIAnimCallBack), UIAnimCallBack);
		dict.Add(typeof(UICallBack), UICallBack);
		dict.Add(typeof(System.Predicate<string>), System_Predicate_string);
		dict.Add(typeof(System.Action<string>), System_Action_string);
		dict.Add(typeof(System.Comparison<string>), System_Comparison_string);
		dict.Add(typeof(InputEventCallBack), InputEventCallBack);
		dict.Add(typeof(InputEventHandle<IInputEventBase>), InputEventHandle_IInputEventBase);
		dict.Add(typeof(LoadCallBack), LoadCallBack);
		dict.Add(typeof(ApplicationVoidCallback), ApplicationVoidCallback);
		dict.Add(typeof(ApplicationBoolCallback), ApplicationBoolCallback);
	}

    [NoToLuaAttribute]
    public static Delegate CreateDelegate(Type t, LuaFunction func = null)
    {
        DelegateValue Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));            
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func);
            
            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }  
            else
            {
                Delegate d = Create(func, null, false);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func);
                return d;
            }       
        }

        return Create(func, null, false);        
    }

    [NoToLuaAttribute]
    public static Delegate CreateDelegate(Type t, LuaFunction func, LuaTable self)
    {
        DelegateValue Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func, self);

            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }
            else
            {
                Delegate d = Create(func, self, true);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func, self);
                return d;
            }
        }

        return Create(func, self, true);
    }

    [NoToLuaAttribute]
    public static Delegate RemoveDelegate(Delegate obj, LuaFunction func)
    {
        LuaState state = func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld.func == func)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                break;
            }
        }

        return obj;
    }

    [NoToLuaAttribute]
    public static Delegate RemoveDelegate(Delegate obj, Delegate dg)
    {
        LuaDelegate remove = dg.Target as LuaDelegate;

        if (remove == null)
        {
            obj = Delegate.Remove(obj, dg);
            return obj;
        }

        LuaState state = remove.func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();        

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld == remove)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                state.DelayDispose(ld.self);
                break;
            }
        }

        return obj;
    }

	class UnityEngine_Events_UnityAction_Event : LuaDelegate
	{
		public UnityEngine_Events_UnityAction_Event(LuaFunction func) : base(func) { }
		public UnityEngine_Events_UnityAction_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			func.Call();
		}

		public void CallWithSelf()
		{
			func.BeginPCall();
			func.Push(self);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate UnityEngine_Events_UnityAction(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UnityEngine.Events.UnityAction fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func);
			UnityEngine.Events.UnityAction d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func, self);
			UnityEngine.Events.UnityAction d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class AnimCallBack_Event : LuaDelegate
	{
		public AnimCallBack_Event(LuaFunction func) : base(func) { }
		public AnimCallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(object[] param0)
		{
			func.BeginPCall();

			for (int i = 0; i < param0.Length; i++)
			{
				func.Push(param0[i]);
			}

			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(object[] param0)
		{
			func.BeginPCall();
			func.Push(self);

			for (int i = 0; i < param0.Length; i++)
			{
				func.Push(param0[i]);
			}

			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate AnimCallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			AnimCallBack fn = delegate(object[] param0) { };
			return fn;
		}

		if(!flag)
		{
			AnimCallBack_Event target = new AnimCallBack_Event(func);
			AnimCallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			AnimCallBack_Event target = new AnimCallBack_Event(func, self);
			AnimCallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class AnimCustomMethodVector3_Event : LuaDelegate
	{
		public AnimCustomMethodVector3_Event(LuaFunction func) : base(func) { }
		public AnimCustomMethodVector3_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.Vector3 param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UnityEngine.Vector3 param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate AnimCustomMethodVector3(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			AnimCustomMethodVector3 fn = delegate(UnityEngine.Vector3 param0) { };
			return fn;
		}

		if(!flag)
		{
			AnimCustomMethodVector3_Event target = new AnimCustomMethodVector3_Event(func);
			AnimCustomMethodVector3 d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			AnimCustomMethodVector3_Event target = new AnimCustomMethodVector3_Event(func, self);
			AnimCustomMethodVector3 d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class AnimCustomMethodVector2_Event : LuaDelegate
	{
		public AnimCustomMethodVector2_Event(LuaFunction func) : base(func) { }
		public AnimCustomMethodVector2_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UnityEngine.Vector2 param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UnityEngine.Vector2 param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate AnimCustomMethodVector2(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			AnimCustomMethodVector2 fn = delegate(UnityEngine.Vector2 param0) { };
			return fn;
		}

		if(!flag)
		{
			AnimCustomMethodVector2_Event target = new AnimCustomMethodVector2_Event(func);
			AnimCustomMethodVector2 d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			AnimCustomMethodVector2_Event target = new AnimCustomMethodVector2_Event(func, self);
			AnimCustomMethodVector2 d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class AnimCustomMethodFloat_Event : LuaDelegate
	{
		public AnimCustomMethodFloat_Event(LuaFunction func) : base(func) { }
		public AnimCustomMethodFloat_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(float param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(float param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate AnimCustomMethodFloat(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			AnimCustomMethodFloat fn = delegate(float param0) { };
			return fn;
		}

		if(!flag)
		{
			AnimCustomMethodFloat_Event target = new AnimCustomMethodFloat_Event(func);
			AnimCustomMethodFloat d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			AnimCustomMethodFloat_Event target = new AnimCustomMethodFloat_Event(func, self);
			AnimCustomMethodFloat d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class InputEventHandle_InputUIOnClickEvent_Event : LuaDelegate
	{
		public InputEventHandle_InputUIOnClickEvent_Event(LuaFunction func) : base(func) { }
		public InputEventHandle_InputUIOnClickEvent_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(InputUIOnClickEvent param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(InputUIOnClickEvent param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate InputEventHandle_InputUIOnClickEvent(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			InputEventHandle<InputUIOnClickEvent> fn = delegate(InputUIOnClickEvent param0) { };
			return fn;
		}

		if(!flag)
		{
			InputEventHandle_InputUIOnClickEvent_Event target = new InputEventHandle_InputUIOnClickEvent_Event(func);
			InputEventHandle<InputUIOnClickEvent> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			InputEventHandle_InputUIOnClickEvent_Event target = new InputEventHandle_InputUIOnClickEvent_Event(func, self);
			InputEventHandle<InputUIOnClickEvent> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class EventHandle_Event : LuaDelegate
	{
		public EventHandle_Event(LuaFunction func) : base(func) { }
		public EventHandle_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(object[] param0)
		{
			func.BeginPCall();

			for (int i = 0; i < param0.Length; i++)
			{
				func.Push(param0[i]);
			}

			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(object[] param0)
		{
			func.BeginPCall();
			func.Push(self);

			for (int i = 0; i < param0.Length; i++)
			{
				func.Push(param0[i]);
			}

			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate EventHandle(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			EventHandle fn = delegate(object[] param0) { };
			return fn;
		}

		if(!flag)
		{
			EventHandle_Event target = new EventHandle_Event(func);
			EventHandle d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			EventHandle_Event target = new EventHandle_Event(func, self);
			EventHandle d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class UIAnimCallBack_Event : LuaDelegate
	{
		public UIAnimCallBack_Event(LuaFunction func) : base(func) { }
		public UIAnimCallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UIWindowBase param0, UICallBack param1, object[] param2)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);

			for (int i = 0; i < param2.Length; i++)
			{
				func.Push(param2[i]);
			}

			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UIWindowBase param0, UICallBack param1, object[] param2)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);

			for (int i = 0; i < param2.Length; i++)
			{
				func.Push(param2[i]);
			}

			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate UIAnimCallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UIAnimCallBack fn = delegate(UIWindowBase param0, UICallBack param1, object[] param2) { };
			return fn;
		}

		if(!flag)
		{
			UIAnimCallBack_Event target = new UIAnimCallBack_Event(func);
			UIAnimCallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UIAnimCallBack_Event target = new UIAnimCallBack_Event(func, self);
			UIAnimCallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class UICallBack_Event : LuaDelegate
	{
		public UICallBack_Event(LuaFunction func) : base(func) { }
		public UICallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(UIWindowBase param0, object[] param1)
		{
			func.BeginPCall();
			func.Push(param0);

			for (int i = 0; i < param1.Length; i++)
			{
				func.Push(param1[i]);
			}

			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(UIWindowBase param0, object[] param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);

			for (int i = 0; i < param1.Length; i++)
			{
				func.Push(param1[i]);
			}

			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate UICallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			UICallBack fn = delegate(UIWindowBase param0, object[] param1) { };
			return fn;
		}

		if(!flag)
		{
			UICallBack_Event target = new UICallBack_Event(func);
			UICallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			UICallBack_Event target = new UICallBack_Event(func, self);
			UICallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class System_Predicate_string_Event : LuaDelegate
	{
		public System_Predicate_string_Event(LuaFunction func) : base(func) { }
		public System_Predicate_string_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public bool Call(string param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}

		public bool CallWithSelf(string param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			bool ret = func.CheckBoolean();
			func.EndPCall();
			return ret;
		}
	}

	public static Delegate System_Predicate_string(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Predicate<string> fn = delegate(string param0) { return false; };
			return fn;
		}

		if(!flag)
		{
			System_Predicate_string_Event target = new System_Predicate_string_Event(func);
			System.Predicate<string> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Predicate_string_Event target = new System_Predicate_string_Event(func, self);
			System.Predicate<string> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class System_Action_string_Event : LuaDelegate
	{
		public System_Action_string_Event(LuaFunction func) : base(func) { }
		public System_Action_string_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate System_Action_string(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Action<string> fn = delegate(string param0) { };
			return fn;
		}

		if(!flag)
		{
			System_Action_string_Event target = new System_Action_string_Event(func);
			System.Action<string> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Action_string_Event target = new System_Action_string_Event(func, self);
			System.Action<string> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class System_Comparison_string_Event : LuaDelegate
	{
		public System_Comparison_string_Event(LuaFunction func) : base(func) { }
		public System_Comparison_string_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public int Call(string param0, string param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}

		public int CallWithSelf(string param0, string param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.Push(param1);
			func.PCall();
			int ret = (int)func.CheckNumber();
			func.EndPCall();
			return ret;
		}
	}

	public static Delegate System_Comparison_string(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			System.Comparison<string> fn = delegate(string param0, string param1) { return 0; };
			return fn;
		}

		if(!flag)
		{
			System_Comparison_string_Event target = new System_Comparison_string_Event(func);
			System.Comparison<string> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			System_Comparison_string_Event target = new System_Comparison_string_Event(func, self);
			System.Comparison<string> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class InputEventCallBack_Event : LuaDelegate
	{
		public InputEventCallBack_Event(LuaFunction func) : base(func) { }
		public InputEventCallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(string param0, IInputEventBase param1)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PushObject(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(string param0, IInputEventBase param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PushObject(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate InputEventCallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			InputEventCallBack fn = delegate(string param0, IInputEventBase param1) { };
			return fn;
		}

		if(!flag)
		{
			InputEventCallBack_Event target = new InputEventCallBack_Event(func);
			InputEventCallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			InputEventCallBack_Event target = new InputEventCallBack_Event(func, self);
			InputEventCallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class InputEventHandle_IInputEventBase_Event : LuaDelegate
	{
		public InputEventHandle_IInputEventBase_Event(LuaFunction func) : base(func) { }
		public InputEventHandle_IInputEventBase_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(IInputEventBase param0)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(IInputEventBase param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate InputEventHandle_IInputEventBase(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			InputEventHandle<IInputEventBase> fn = delegate(IInputEventBase param0) { };
			return fn;
		}

		if(!flag)
		{
			InputEventHandle_IInputEventBase_Event target = new InputEventHandle_IInputEventBase_Event(func);
			InputEventHandle<IInputEventBase> d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			InputEventHandle_IInputEventBase_Event target = new InputEventHandle_IInputEventBase_Event(func, self);
			InputEventHandle<IInputEventBase> d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class LoadCallBack_Event : LuaDelegate
	{
		public LoadCallBack_Event(LuaFunction func) : base(func) { }
		public LoadCallBack_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(LoadState param0, object param1)
		{
			func.BeginPCall();
			func.PushObject(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(LoadState param0, object param1)
		{
			func.BeginPCall();
			func.Push(self);
			func.PushObject(param0);
			func.Push(param1);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate LoadCallBack(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			LoadCallBack fn = delegate(LoadState param0, object param1) { };
			return fn;
		}

		if(!flag)
		{
			LoadCallBack_Event target = new LoadCallBack_Event(func);
			LoadCallBack d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			LoadCallBack_Event target = new LoadCallBack_Event(func, self);
			LoadCallBack d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class ApplicationVoidCallback_Event : LuaDelegate
	{
		public ApplicationVoidCallback_Event(LuaFunction func) : base(func) { }
		public ApplicationVoidCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call()
		{
			func.Call();
		}

		public void CallWithSelf()
		{
			func.BeginPCall();
			func.Push(self);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate ApplicationVoidCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			ApplicationVoidCallback fn = delegate() { };
			return fn;
		}

		if(!flag)
		{
			ApplicationVoidCallback_Event target = new ApplicationVoidCallback_Event(func);
			ApplicationVoidCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			ApplicationVoidCallback_Event target = new ApplicationVoidCallback_Event(func, self);
			ApplicationVoidCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

	class ApplicationBoolCallback_Event : LuaDelegate
	{
		public ApplicationBoolCallback_Event(LuaFunction func) : base(func) { }
		public ApplicationBoolCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

		public void Call(bool param0)
		{
			func.BeginPCall();
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}

		public void CallWithSelf(bool param0)
		{
			func.BeginPCall();
			func.Push(self);
			func.Push(param0);
			func.PCall();
			func.EndPCall();
		}
	}

	public static Delegate ApplicationBoolCallback(LuaFunction func, LuaTable self, bool flag)
	{
		if (func == null)
		{
			ApplicationBoolCallback fn = delegate(bool param0) { };
			return fn;
		}

		if(!flag)
		{
			ApplicationBoolCallback_Event target = new ApplicationBoolCallback_Event(func);
			ApplicationBoolCallback d = target.Call;
			target.method = d.Method;
			return d;
		}
		else
		{
			ApplicationBoolCallback_Event target = new ApplicationBoolCallback_Event(func, self);
			ApplicationBoolCallback d = target.CallWithSelf;
			target.method = d.Method;
			return d;
		}
	}

}

